{"version":3,"sources":["TransitMap/index.js","App.js","serviceWorker.js","index.js"],"names":["rename","manualLabelPlacement","serviceChanges","serviceChangeData","map","change","line","trim","noRouteFeatures","filter","toLowerCase","includes","route","changes","unused","ccRoutes","countyconnectionRoutes","features","Set","f","properties","route_short_name","routeFeatures","r","feature","type","geometry","forEach","coordinates","PUB_RTE","find","area","route_long_name","push","routeGeoBounds","geoBounds","overlapping","box1","box2","x2","x1","y1","y2","hexToRgb","hex","result","exec","parseInt","getRectDimensions","position","rectWidth","rectHeight","TransitMap","props","changeType","selected","visibleGroups","showTransbay","colorScale","orderScale","setSearchValue","clearSelected","useState","tooltipData","setTooltipData","useDimensions","ref","x","y","width","height","defaultViewState","useMemo","viewState","fitBounds","bounds","padding","bearing","pitch","routes","labelPositions","sortBy","scaleKey","color","order","Math","max","length","flatCoordinates","flatDeep","arr","d","reduce","acc","val","concat","Array","isArray","slice","Infinity","start","usedPositon","lp","splice","pos","console","log","labelPos","displayRoutes","routesByGroup","group","from","key","values","updateTooltip","datum","fromMap","status","description","clearSelection","hoverLine","target","object","useEffect","textLayers","TextLayer","id","data","pickable","getText","getPosition","opacity","getColor","backgroundColor","sizeMinPixels","sizeMaxPixels","fontFamily","fontWeight","sizeUnits","sizeScale","parameters","depthTest","onHover","highlightLayers","GeoJsonLayer","stroked","filled","lineJointRounded","lineWidthMinPixels","lineWidthMaxPixels","getLineWidth","getFillColor","getLineColor","layers","className","pickingRadius","initialViewState","controller","getCursor","ContextProvider","MapContext","Provider","mapStyle","mapboxApiAccessToken","process","preventStyleDiffing","reuseMaps","showCompass","style","borderColor","onClick","warn","join","typesInOrder","scaleOrdinal","domain","range","isNaN","getSuggestions","value","transbay","inputValue","getSuggestionValue","suggestion","App","setValue","searchValue","suggestions","setSuggestions","setVisibleGroups","href","rel","t","reverse","groups","nextGroups","background","onMouseMove","e","dataset","focusInputOnSuggestionClick","alwaysRenderSuggestions","onSuggestionsFetchRequested","onSuggestionsClearRequested","renderSuggestion","isSelected","data-route","shouldRenderSuggestions","inputProps","placeholder","onChange","newValue","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3d4daf38.chunk.js","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport sortBy from 'lodash.sortby';\nimport { group } from 'd3-array';\nimport { geoBounds } from 'd3-geo';\nimport useDimensions from 'react-use-dimensions';\nimport { StaticMap, NavigationControl, _MapContext as MapContext, } from 'react-map-gl';\nimport { fitBounds } from 'viewport-mercator-project';\nimport DeckGL from '@deck.gl/react';\nimport { GeoJsonLayer, TextLayer } from '@deck.gl/layers';\n\nimport './styles.css';\n\n// import Winter19Routeshape from './Winter19Routeshape.geo.json';\nimport countyconnectionRoutes from './countyconnection.geo.json';\nimport serviceChangeData from './countyconnection-service-cuts.json';\n\nexport const rename = {\n  // '1': 'BRT/1',\n};\n\nconst manualLabelPlacement = {\n  // 'BSD': [-122.271168, 37.804324],\n  '321': [-122.03253539842002, 37.850260435124405],\n  '311': [-122.03405097473185, 37.94849844161103],\n};\n\nconst serviceChanges = serviceChangeData.map(change => {\n  change.line = rename[change.line] || change.line;\n  // change['change-15'] = change['change-15'].trim() === '' ? 'no change' : change['change-15'];\n  change['scenario-3'] = change['scenario-3'].trim() === '' ? 'no change' : change['scenario-3'];\n  return change;\n});\nconst noRouteFeatures = serviceChanges\n  .filter(change => change.line.toLowerCase().includes('flex'))\n  .map(change => ({\n    route: change.line,\n    changes: change,\n  }));\nconst unused = [];\nconst ccRoutes = countyconnectionRoutes; // Routes;\nconst features = [...new Set(ccRoutes.features.map(f => f.properties.route_short_name))]\n  .map(f => {\n    const routeFeatures = ccRoutes.features.filter(r => r.properties.route_short_name === f);\n    const feature = {\n      type: 'Feature',  \n      properties: {},\n      geometry: {},\n    };\n    routeFeatures.forEach(route => {\n      feature.properties = {\n        ...route.properties,\n      };\n    });\n    feature.geometry.coordinates = routeFeatures.map(r => r.geometry.coordinates)//.reduce((a, v) => a.push(v), []);\n    feature.geometry.type = 'MultiLineString';\n    return feature;\n  });\n\n// ccRoutes.features = ccRoutes.features\nccRoutes.features = features\n  .map(f => {\n    f.route = rename[f.properties.PUB_RTE] || f.properties.PUB_RTE || f.properties.route_short_name;\n    f.changes = serviceChanges.find(r => r.line === f.route);\n    if (!f.changes) {\n      unused.push(f.route);\n    } else {\n      f.changes.area = f.properties.route_long_name;\n    }\n    return f;\n  })\n  .filter(f => f.changes); // hiding no info routes for now\n\nconst routeGeoBounds = geoBounds(ccRoutes);\nccRoutes.features = ccRoutes.features.concat(noRouteFeatures);\n\nconsole.warn(`no information for: ${unused.join(', ')}`);\n\n// from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat\nfunction flatDeep(arr, d = 1) {\n  return d > 0\n    ? arr.reduce((acc, val) => acc.concat(Array.isArray(val) ? flatDeep(val, d - 1) : val), [])\n    : arr.slice();\n};\n\nfunction overlapping(box1, box2) {\n  return box1.x2 >= box2.x1 && box1.x1 <= box2.x2 && box1.y1 <= box2.y2 && box1.y2 >= box2.y1;\n}\n\nfunction mapToNest(map) {\n  return Array.from(map, ([key, values]) => ({key, values}));\n}\n\nfunction hexToRgb(hex) {\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? [\n    parseInt(result[1], 16),\n    parseInt(result[2], 16),\n    parseInt(result[3], 16)\n  ] : null;\n}\n\nfunction getRectDimensions(position, rectWidth, rectHeight) {\n  return {\n    x1: position[0] - rectWidth / 2,\n    y1: position[1],\n    x2: position[0] + rectWidth / 2,\n    y2: position[1] + rectHeight,\n  };\n}\n\nexport default function TransitMap(props) {\n  const { changeType, selected, visibleGroups, showTransbay, colorScale, orderScale, setSearchValue, clearSelected } = props;\n  const [tooltipData, setTooltipData] = useState();\n  const [ref, { x, y, width, height }] = useDimensions();\n\n  const defaultViewState = useMemo(() => {\n    const viewState = fitBounds({\n      bounds: routeGeoBounds,\n      width: width || 100,\n      height: height || 100,\n      padding: 16,\n    });\n    viewState.bearing = 0;\n    viewState.pitch = 0;\n    return viewState;\n  }, [width, height]);\n\n  const routes = useMemo(() => {\n    const size = 0.007;//2; //0.0075; // 0.0072; // min: 0.005;\n    const rectHeight = size / 3 * 4;\n    const labelPositions = [];\n\n    return (\n      sortBy(\n        sortBy(\n          ccRoutes.features.map(f => {\n            f.scaleKey = f.changes ? f.changes[changeType].trim() : 'other';\n            f.color = colorScale(f.scaleKey);\n            f.order = orderScale(f.scaleKey);\n            return f;\n          })\n        , f => f.route)\n      , f => f.order)\n      .map(f => {\n        if (f.geometry) {\n          const rectWidth = Math.max(rectHeight, rectHeight / 2 * f.route.length);\n          const flatCoordinates = flatDeep(f.geometry.coordinates.slice(), Infinity);\n          f.start = manualLabelPlacement[f.route] ? manualLabelPlacement[f.route] : flatCoordinates.slice(0, 2);\n          let position = f.start;\n          let usedPositon = labelPositions.find(lp => overlapping(lp, getRectDimensions(position, rectWidth, rectHeight)));\n\n          while (usedPositon) {\n            flatCoordinates.splice(0, 2);\n            let pos = f.start;\n            if (flatCoordinates.length >= 2) {\n              pos = flatCoordinates.slice(0, 2);\n              usedPositon = labelPositions.find(lp => overlapping(lp, getRectDimensions(pos, rectWidth, rectHeight)));\n            } else {\n              console.log(`default: ${f.route}`);\n              usedPositon = false;\n            }\n            position = pos;\n          }\n\n          labelPositions.push(getRectDimensions(position, rectWidth, rectHeight));\n          f.labelPos = position;\n        }\n        return f;\n      }) \n    );\n  }, [changeType, colorScale, orderScale]);\n\n  const displayRoutes = useMemo(() => (\n    routes.filter(route => (\n      visibleGroups.includes(route.scaleKey) && (showTransbay || !route.changes.area.toLowerCase().includes('transbay')) && route.geometry\n    ))\n  ), [routes, visibleGroups, showTransbay]);\n\n  const routesByGroup = useMemo(() => (\n    mapToNest(group(displayRoutes, route => route.scaleKey))\n  ), [displayRoutes]);\n\n  const updateTooltip = useMemo(() => (\n    function(datum, fromMap = false) {\n      const { route, scaleKey, color, order, changes } = datum;\n      const status = scaleKey;\n      const { area, group, description } = changes;\n      if (fromMap) {\n        setSearchValue(route);\n      }\n      setTooltipData({\n        route,\n        color,\n        order,\n        area,\n        group,\n        description,\n        status,\n        datum: datum.geometry ? datum : null,\n      });\n    }\n  ), [setSearchValue]);\n\n  useEffect(() => {\n    const datum = routes.find(r => r.route === selected);\n    if (datum) {\n      updateTooltip(datum);\n    } else {\n      setTooltipData(null);\n    }\n  }, [updateTooltip, selected, routes, x, y ]);\n\n  function clearSelection() {\n    if (selected !== '') {\n      clearSelected();\n    }\n    if (tooltipData) {\n      setTooltipData(null);  \n    }\n  }\n\n  function hoverLine(target) {\n    const { object } = target;\n    if (object) {\n      const { route } = object;\n      const datum = routes.filter(r => (\n        visibleGroups.includes(r.scaleKey) && (showTransbay || !r.changes.area.toLowerCase().includes('transbay'))\n      )).find(r => r.route === route);\n      if (datum) {\n        if (!tooltipData || tooltipData.route !== route) {\n          updateTooltip(datum, true);\n        }\n      }\n    } else {\n      clearSelection();\n    }\n  }\n\n  const textLayers = routesByGroup.map(group => {      \n    return new TextLayer({\n      id: `${group.key}-route-labels-background`,\n      data: group.values,\n      pickable: false,\n      getText: route => route.route,\n      getPosition: route => route.labelPos,\n      opacity: selected ? 0.025 : 1,\n      getColor: [0, 0, 0],\n      backgroundColor: hexToRgb(colorScale(group.key)),\n      sizeMinPixels: 0,\n      sizeMaxPixels: 28, //30,\n      fontFamily: 'Fira Sans, sans-serif',\n      fontWeight: 500,\n      sizeUnits: 'meters',\n      sizeScale: 36,\n      parameters: {\n        depthTest: false,\n      },\n    });\n  }).concat(routesByGroup.map(group => {      \n    return new TextLayer({\n      id: `${group.key}-route-labels`,\n      data: group.values,\n      pickable: true,\n      onHover: hoverLine,\n      getText: route => route.route,\n      getPosition: route => route.labelPos,\n      opacity: selected ? 0.025 : 1,\n      getColor: [255, 255, 255],\n      backgroundColor: [18, 18, 18],\n      sizeMinPixels: 0,\n      sizeMaxPixels: 24,\n      fontFamily: 'Fira Sans, sans-serif',\n      fontWeight: 500,\n      sizeUnits: 'meters',\n      sizeScale: 32,\n      parameters: {\n        depthTest: false,\n      },\n    });\n  }));\n\n  const highlightLayers = tooltipData && tooltipData.datum ? [\n    new GeoJsonLayer({\n      id: `${tooltipData.datum.scaleKey}-route-background`,\n      data: [tooltipData.datum],\n      stroked: true,\n      filled: false,\n      pickable: false,\n      lineJointRounded: true, \n      lineWidthMinPixels: 4,\n      lineWidthMaxPixels: 16,\n      getLineWidth: 12,\n      getFillColor: [0, 0, 0, 255],\n      getLineColor: [255, 255, 255],\n      parameters: {\n        depthTest: false,\n      },\n    }),\n    new GeoJsonLayer({\n      id: `${tooltipData.datum.scaleKey}-route`,\n      data: [tooltipData.datum],\n      stroked: true,\n      filled: false,\n      pickable: false,\n      lineJointRounded: true,\n      lineWidthMinPixels: 2,\n      lineWidthMaxPixels: 12,\n      getLineWidth: 10,\n      getFillColor: [0, 0, 0, 255],\n      getLineColor: route => hexToRgb(colorScale(route.scaleKey)),\n      parameters: {\n        depthTest: false,\n      },\n    }),\n    new TextLayer({\n      id: `${tooltipData.datum.scaleKey}-highlight-label-background`,\n      data: [tooltipData.datum],\n      pickable: false,\n      getText: route => route.route,\n      getPosition: route => route.labelPos,\n      getColor: [0, 0, 0],\n      backgroundColor: hexToRgb(colorScale(tooltipData.datum.scaleKey)),\n      sizeMinPixels: 20,\n      sizeMaxPixels: 36,\n      fontFamily: 'Fira Sans, sans-serif',\n      fontWeight: 500,\n      sizeUnits: 'meters',\n      sizeScale: 45,\n      parameters: {\n        depthTest: false,\n      },\n    }),\n    new TextLayer({\n      id: `${tooltipData.datum.scaleKey}-highlight-label`,\n      data: [tooltipData.datum],\n      pickable: false,\n      getText: route => route.route,\n      getPosition: route => route.labelPos,\n      getColor: [255, 255, 255],\n      backgroundColor: [18, 18, 18],\n      sizeMinPixels: 16,\n      sizeMaxPixels: 32,\n      fontFamily: 'Fira Sans, sans-serif',\n      fontWeight: 500,\n      sizeUnits: 'meters',\n      sizeScale: 40,\n      parameters: {\n        depthTest: false,\n      },\n    }),\n  ] : [];\n\n  const layers = [\n    new GeoJsonLayer({\n      id: 'routes',\n      data: displayRoutes,\n      stroked: true,\n      filled: false,\n      pickable: true,\n      lineJointRounded: true,\n      lineWidthMinPixels: 1.5,\n      lineWidthMaxPixels: 5,\n      opacity: selected ? 0.005 : 1,\n      getLineWidth: 10,\n      getFillColor: [0, 0, 0],\n      getLineColor: route => hexToRgb(colorScale(route.scaleKey)),\n      onHover: hoverLine,\n      parameters: {\n        depthTest: false,\n      },\n    }),\n    ...textLayers,\n    ...highlightLayers,\n  ];\n\n  return (\n    <div ref={ref} className=\"TransitMap\">\n      <DeckGL\n        layers={layers}\n        pickingRadius={8}\n        initialViewState={defaultViewState}\n        controller={true}\n        getCursor={() => tooltipData ? 'pointer' : 'grab'}\n        ContextProvider={MapContext.Provider}\n      >    \n        <StaticMap\n          mapStyle=\"mapbox://styles/jprctr/ckf7hqkbl2caw19nw1abtzh3c\"\n          mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n          preventStyleDiffing={true}\n          reuseMaps\n        />\n        <div className=\"navigationControl\">\n          <NavigationControl showCompass={false} />\n        </div>\n      </DeckGL>\n      <div\n        className='tooltip'\n        style={{ borderColor: tooltipData ? tooltipData.color : 'white', opacity: tooltipData ? 1 : 0 }}\n      >\n        <div className='column left'>\n          <div className='row'>\n            <div className='route left'>\n              <span>\n                {tooltipData ? tooltipData.route : ''}\n              </span>\n            </div>\n            <div className='area right'>\n              <span>\n                {tooltipData ? tooltipData.area : ''}\n              </span>\n            </div>\n          </div>\n          <div className='row'>\n            <div className='status left'>\n              <span>\n                {tooltipData ? tooltipData.status : ''}\n              </span>\n            </div>\n            <div className='group right'>\n              <span>\n                {tooltipData ? tooltipData.group : ''}\n              </span>\n            </div>\n          </div>\n        </div>\n        <div className='column right'>\n          <div className='row description'>\n            <div>\n              <span>\n                {tooltipData ? tooltipData.description : ''}\n              </span>\n            </div>\n          </div>\n        </div>\n        <div\n          className='close'\n          style={{ borderColor: tooltipData ? tooltipData.color : 'white' }}\n          onClick={clearSelection}\n        >\n          <div>x</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { scaleOrdinal } from 'd3-scale';\nimport sortBy from 'lodash.sortby';\nimport Autosuggest from 'react-autosuggest';\nimport useDimensions from 'react-use-dimensions';\nimport { Toggle } from \"react-toggle-component\";\n\nimport TransitMap, { rename } from './TransitMap'\nimport serviceChanges from './TransitMap/countyconnection-service-cuts.json';\n\nimport './App.css';\n\nconst typesInOrder = ['other', 'no change', 'modified', 'reduced', 'eliminated']; // 'increased', \n\nconst colorScale = scaleOrdinal()\n  .domain(typesInOrder)\n  .range(['#a8aaac', '#10684e', '#ffc75f', '#ff9671', '#CC0000']); // '#008e9b', \n\nconst orderScale = scaleOrdinal()\n  .domain(typesInOrder)\n  .range([1, 2, 3, 4, 5, 6]);\n\nconst changeType = 'scenario-3';\nconst routes = sortBy(\n  sortBy(\n    serviceChanges.map(route => {\n      route.route = rename[route.line] || route.line;\n      route.scaleKey = route[changeType].trim();\n      route.scaleKey = route.scaleKey === '' ? 'no change' : route.scaleKey;\n      route.color = colorScale(route.scaleKey);\n      route.order = orderScale(route.scaleKey);\n      return route;\n    }).filter(change => change.line !== '40-duplicate')\n  ,r => isNaN(parseInt(r.route)) ? r.route : parseInt(r.route))\n,r => -r.order);\n\nconst getSuggestions = (value, visibleGroups, transbay) => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n  return inputLength === 0\n    ? routes\n    : routes.filter(route => (\n      route.route.toLowerCase().includes(inputValue) && (transbay || !route.area.toLowerCase().includes('transbay'))\n    ));\n};\n\nconst getSuggestionValue = suggestion => suggestion.route;\n\nfunction App() {\n  const [value, setValue] = useState('');\n  const [searchValue, setSearchValue] = useState('');\n  const [suggestions, setSuggestions] = useState(routes);\n  const [visibleGroups, setVisibleGroups] = useState(typesInOrder);\n  const [showTransbay, setShowTransbay] = useState(true);\n  const [ref, { width }] = useDimensions();\n\n  useEffect(() => {\n    setValue(searchValue);\n    setSuggestions(getSuggestions(searchValue, visibleGroups, showTransbay));\n  }, [searchValue, visibleGroups, showTransbay]);\n\n  function clearSelected() {\n    setValue('');\n    setSearchValue('');\n    setSuggestions(getSuggestions('', visibleGroups, showTransbay));\n  }\n\n  function updateGroups(id) {\n    setVisibleGroups(groups => {\n      if (groups.includes(id)) {\n        const nextGroups = groups.slice().filter(group => group !== id);\n        return nextGroups.length ? nextGroups : [];\n      } else {\n        return groups.concat([id]);\n      }\n    });\n  }\n\n  const renderSuggestion = (suggestion) => {\n    const isSelected = suggestion.route === value;\n    return (\n      <div\n        className={`suggestion ${isSelected ? 'selected' : ''}`}\n        data-route={suggestion.route}\n        style={{ borderColor: suggestion.color }}\n      >\n        <div className='label'>\n          {suggestion.route}\n        </div>\n        <div className='status'>\n          {suggestion.scaleKey}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div ref={ref} className=\"App\">\n      <div className='panel'>\n        <div className='headings'>\n          <div className='title'>\n            Proposed County Connection Service Cuts \n          </div>\n          <div className='subtitle'>\n            2021 Scenario 3\n          </div>\n          <div className='source'>\n            <span>\n              Based on <a href='https://countyconnection.com/2021-service-plan/' target='_blank' rel='noopener noreferrer'>County Connection 2021 Service Plan Proposals</a>\n            </span>\n          </div>\n        </div>\n        {\n        // <div className='transbayToggle'>\n        //   <Toggle\n        //     name='transbayLines'\n        //     className='toggle'\n        //     checked={showTransbay}\n        //     onChange={e => setShowTransbay(e.target.checked)}\n        //     leftBackgroundColor='#121212'\n        //     rightBackgroundColor='#10684e'\n        //     borderColor='none'\n        //     knobColor='#ffffff'\n        //     borderWidth='0.25em'\n        //     width='2.7em'\n        //     height='1.65em'\n        //     knobWidth='1em'\n        //     knobHeight='1em'\n        //     knobRadius='0.5em'\n        //   />\n        //   <label className='label' htmlFor='transbayLines'>\n        //     {showTransbay ? 'Showing' : 'Hiding'} Transbay Services\n        //   </label>\n        // </div>\n      }\n        <div className='legend'>\n          {typesInOrder.filter(t => t !== 'other').reverse().map(t => (\n            <div\n              key={t}\n              className='item'\n              onClick={() => updateGroups(t)}\n              style={{ opacity: visibleGroups.includes(t) ? 1 : 0.25 }}\n            >\n              <div className='swatch' style={{ background: colorScale(t) }}/>\n              <div className='label'>\n                {t}\n              </div>\n            </div>\n          ))}\n        </div>\n        <div\n          className='search'\n          onMouseMove={e => {\n            const { target } = e;\n            const { dataset } = target;\n            const { route } = dataset;\n            if (route) {\n              setValue(route);\n            }\n          }}\n        >\n          <Autosuggest\n            focusInputOnSuggestionClick={false}\n            alwaysRenderSuggestions={width > 768}\n            suggestions={suggestions.filter(route => (\n              visibleGroups.includes(route.scaleKey) && (showTransbay || !route.area.toLowerCase().includes('transbay'))\n            ))}\n            onSuggestionsFetchRequested={({ value }) => setSuggestions(getSuggestions(value, visibleGroups, showTransbay))}\n            onSuggestionsClearRequested={() => {}}\n            getSuggestionValue={getSuggestionValue}\n            renderSuggestion={suggestion => renderSuggestion(suggestion)}\n            shouldRenderSuggestions={() => true}\n            inputProps={{\n              placeholder: 'Search',\n              value,\n              onChange: (e, { newValue }) => setValue(newValue),\n            }}\n          />\n        </div>\n      </div>\n      <TransitMap\n        changeType={changeType}\n        selected={value}\n        clearSelected={clearSelected}\n        visibleGroups={visibleGroups}\n        showTransbay={showTransbay}\n        colorScale={colorScale}\n        orderScale={orderScale}\n        setSearchValue={setSearchValue}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}